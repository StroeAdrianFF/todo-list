{"version":3,"sources":["components/Form.js","components/Todo.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","value","inputText","type","className","onChange","event","setInputText","target","onClick","preventDefault","setTodo","todo","text","completed","id","Math","random","name","setStatus","Todo","todos","map","item","filter","el","List","filtered","key","App","useState","status","setFiltered","useEffect","localStorage","getItem","setItem","JSON","stringify","localTodo","parse","getTodo","filteredHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36ad8edb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Form = (props) => {\r\n\r\n    const inputTextHandler = (event) => {\r\n        props.setInputText(event.target.value)\r\n    }\r\n\r\n    const submitTodoHandler = (event) => {\r\n        event.preventDefault();\r\n        props.setTodo([\r\n            ...props.todo,\r\n            {\r\n                text: props.inputText,\r\n                completed: false,\r\n                id: Math.random() * 250\r\n            }\r\n        ]);\r\n        props.setInputText('')\r\n    }\r\n\r\n    const statusHandler = (event) => {\r\n        props.setStatus(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <form>\r\n            <input value={props.inputText} type=\"text\" className=\"todo-input\" onChange={inputTextHandler} />\r\n            <button className=\"todo-button\" type=\"submit\" onClick={submitTodoHandler}>\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select name=\"todos\" className=\"filter-todo\" onChange={statusHandler}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst Todo = (props) => {\r\n\r\n    const deleteTodoHandler = () => {\r\n        props.setTodo(props.todo.filter(el => el.id !== props.todos.id))\r\n\r\n    }\r\n\r\n    const completeTodoHandler = () => {\r\n        props.setTodo(props.todo.map(item => {\r\n            if (item.id === props.todos.id) {\r\n                return {\r\n                    ...item,\r\n                    completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${props.todos.completed ? \"completed\" : ''}`}>{props.text}</li>\r\n            <button className=\"complete-btn\" onClick={completeTodoHandler}><i className=\"fas fa-check\" ></i></button>\r\n            <button className=\"trash-btn\" onClick={deleteTodoHandler}><i className=\"fas fa-trash\" ></i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst List = (props) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {\r\n                    props.filtered.map(todos => (\r\n                        <Todo text={todos.text} key={todos.id} setTodo={props.setTodo} todo={props.todo} todos={todos} filtered={props.filtered} />\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport List from './components/List';\n\nfunction App() {\n\n  const [inputText, setInputText] = useState('');\n  const [todo, setTodo] = useState([]);\n  const [status, setStatus] = useState('All');\n  const [filtered, setFiltered] = useState([]);\n\n\n\n  useEffect(() => {\n    const getTodo = () => {\n      if (localStorage.getItem('todo') === null) {\n        localStorage.setItem('todo', JSON.stringify([]))\n      } else {\n        let localTodo = JSON.parse(localStorage.getItem('todo'))\n        setTodo(localTodo);\n      }\n    }\n\n\n    getTodo();\n  }, [])\n\n\n  useEffect(() => {\n    const filteredHandler = () => {\n      switch (status) {\n        case 'completed':\n          setFiltered(todo.filter(todos => todos.completed === true))\n          break;\n        case 'uncompleted':\n          setFiltered(todo.filter(todos => todos.completed === false))\n          break;\n        default: setFiltered(todo);\n      }\n    }\n\n    const save = () => {\n      localStorage.setItem('todo', JSON.stringify(todo))\n    }\n\n\n    filteredHandler();\n    save();\n  }, [todo, status])\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Todo List</h1>\n      </header>\n      <Form inputText={inputText} setInputText={setInputText} todo={todo} setTodo={setTodo} setStatus={setStatus} />\n      <List todo={todo} setTodo={setTodo} filtered={filtered} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}